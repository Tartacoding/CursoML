# -*- coding: utf-8 -*-
"""AulaML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RCdoDfHNlIYX0XPRAgFXWCKnq83DSF9

#Importação das bibliotecas básicas
"""

!pip install plotly --upgrade

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

"""#Base de Dados de crédito
*  Fonte (adaptado): https://www.kaggle.com/laotse/credit-risk-dataset

##Exploração dos dados
"""

base_credit = pd.read_csv('/content/sample_data/credit_data.csv')

base_credit # defaulted

base_credit.head(27)

base_credit.tail(8)

base_credit.describe()

base_credit[base_credit['income'] >= 69995.685578]

base_credit[base_credit['loan'] <= 1.377630]

"""##Visualização dos dados"""

np.unique(base_credit['default'], return_counts=True)

sns.countplot(x = base_credit['default']);

plt.hist(x = base_credit['age']);

plt.hist(x = base_credit['income']);

plt.hist(x = base_credit['loan']);

grafico = px.scatter_matrix(base_credit, dimensions=['age','income','loan'], color = 'default')
grafico.show()

"""##Tratamento de valores inconsistentes"""

base_credit.loc[base_credit['age'] < 0]

base_credit[base_credit['age'] < 0]

#Apaga a coluna inteira(de todos os registros da base da dados)
base_credit2 = base_credit.drop('age', axis = 1)
base_credit2

base_credit.index

base_credit[base_credit['age'] < 0].index

#Apagar somente os registros com valores inconsistentes
base_credit3 = base_credit.drop(base_credit[base_credit['age'] < 0].index)
base_credit3

base_credit3.loc[base_credit3['age'] < 0]

#Preencher os valores inconsistentes manualmente

#Preencher á média
base_credit.mean()

base_credit['age'].mean()

base_credit['age'][base_credit['age'] > 0].mean()

base_credit.loc[base_credit['age'] < 0, 'age'] = 40.92

base_credit.loc[base_credit['age'] < 0]

base_credit.head(10)

"""## Tratamento de valores faltantes"""

base_credit.isnull()

base_credit.isnull().sum()

base_credit.loc[pd.isnull(base_credit['age'])]

base_credit['age'].fillna(base_credit['age'].mean(), inplace = True)

base_credit.loc[pd.isnull(base_credit['age'])]

base_credit.loc[(base_credit['clientid'] == 29) | (base_credit['clientid'] == 31) | (base_credit['clientid'] == 32)]

base_credit.loc[base_credit['clientid'].isin([29, 31, 32])]

"""##Disão entre divisores e classe"""

